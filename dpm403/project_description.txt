The project, which is the second of ARP's Robotics students' assignments, consists in designing and developing a set of 
four concurrent programs whose goal is to evaluate the efficiency and measure the performance in terms of speed of data transit between
a producer and a consumer using various models.


The four programs are built around a set of IPC transfer primitives called: unnamed pipe, named pipe, socket, shared memory with circular buffer.
Two processes, one for the producer and one for the consumer, have been implemented to manage each type of communication indipendently.


Each producer starts with a buffer of random data, and each consumer has one of the same dimension. The specific consumer receives data and fills its array.
The amount of time spent transferring is tracked and reported.
At any time during a run, the user can change the array dimension (a maximum value of about 100 MB can be imposed). 

For the management of the fourth process we decided to use three semaphores, precisely mutex, not_empty and not_full that are used to ensure
that the circular buffer is used correctly, preventing the producer process from writing inside a block that the consumer has not yet read and from 
the other hand avoiding the consumer from reading something that the producer has not yet printed. 

The shared memory process utilizes a circular buffer with a fixed size that is substantially smaller than the quantity of data to be transferred (from 1 to 10 KB). 

For each process the possibility has been added to dynamically allocate the memory through the malloc or to fill the stack manually by maximizing the size.
The type of memory allocation can be changed by the user via the interface. 

Thanks to the interactive user interface, the four programs can be launched separately depending on the choice of the user.

In order to make clearer the code simple functions have been implemented to show the instructions to the user and to take the desired size 
of data transfer and the size of the circular buffer used. 

For the correct visualization it has been chosen to show all the possible directives to guarantee an easy understanding to the user.

A time file is generated inside the logs folder, in order to track every program execution and the duration of the data transit.